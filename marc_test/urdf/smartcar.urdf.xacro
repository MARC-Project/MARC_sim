<?xml version="1.0"?>
<robot name="smartcar" xmlns:xacro="http://www.ros.org/wiki/xacro">

<!-- /////////////////////////////////////////////////////////////////-->

<!-- Include materials-->

<material name="Black">
   <color rgba="0.0 0.0 0.0 1.0"/>
</material>

<material name="White">
   <color rgba="1.0 1.0 1.0 1.0"/>
</material>

<!-- /////////////////////////////////////////////////////-->

<!-- constants -->
<xacro:property name="deg_to_rad" value="0.017453"/>
<xacro:property name="PI" value="3.14"/>
<xacro:property name="degrees_45" value="0.785398163"/>
<xacro:property name="degrees_90" value="1.57079633"/>

<!-- chassis property -->
<xacro:property name="chassis_length" value="0.218"/>
<xacro:property name="chassis_width" value="0.118"/>
<xacro:property name="chassis_height" value="0.01"/>
<xacro:property name="chassis_mass" value="1.58"/>

<!-- wheel property -->
<xacro:property name="wheel_radius" value="0.033"/>
<xacro:property name="wheel_width" value="0.03"/>
<xacro:property name="wheel_height" value="0.11"/>
<xacro:property name="wheel_mass" value="0.2"/>
<xacro:property name="wheelbase" value="0.145"/>

<!-- //////////////////     innertia      //////////////////////////-->
<xacro:macro name="cylinder_inertia" params ="m r h">
  <inertial>
    <mass value="${m}"/>
    <inertia ixx="${m*(3*r*r+h*h)/12}"  ixy="0.0" ixz="0.0"
            iyy="${m*(3*r*r+h*h)/12}"  iyz= "0.0"
            izz="${m*r*r/2}"/>
   </inertial>
</xacro:macro>


<!-- Inertia of a solid cuboid. Width is measured along the x axis, depth
       along the y axis, and height along the z axis. -->
<xacro:macro name="solid_cuboid_inertial"
               params="width depth height mass *origin">
  <inertial>
    <xacro:insert_block name="origin"/>
    <mass value="${mass}"/>
    <inertia ixx="${mass * (depth * depth + height * height) / 12}"
               ixy="0" ixz="0"
               iyy="${mass * (width * width + height * height) / 12}"
               iyz="0"
               izz="${mass * (width * width + depth * depth) / 12}"/>
  </inertial>
</xacro:macro>

  <!-- Inertia of a thick-walled cylindrical tube with open ends. Height is
       measured along the z axis, which is the tube's axis. inner_rad and
       outer_rad are the tube's inner and outer radii, respectively. -->
<xacro:macro name="thick_walled_tube_inertial"
               params="inner_rad outer_rad height mass">
  <inertial>
    <mass value="${mass}"/>
    <inertia ixx="${(1 / 12) * mass * (3 * (inner_rad * inner_rad +
                    outer_rad * outer_rad) + height * height)}"
               ixy="0" ixz="0"
               iyy="${(1 / 12) * mass * (3 * (inner_rad * inner_rad +
                    outer_rad * outer_rad) + height * height)}"
               iyz="0"
               izz="${mass * (inner_rad * inner_rad +
                    outer_rad * outer_rad) / 2}"/>
  </inertial>
</xacro:macro>

<!-- //////////////////////////////////////////////////// -->

<!-- /////////////////////     Chassis     ///////////////////////-->

  <!-- Chassis -->
  <link name="chassis">
    <visual>
      <origin xyz="0 0 ${wheel_radius + 0.01}" rpy="0 0.01 0"/>
      <geometry>
        <box size="${chassis_length} ${chassis_width} ${chassis_height}"/>
      </geometry>
    </visual>

    <collision>
      <origin xyz="0 0 ${wheel_radius + 0.01}" rpy="0 0.01 0"/>
      <geometry>
        <box size="${chassis_length} ${chassis_width} ${chassis_height}"/>
      </geometry>
    </collision>
  </link>
  <gazebo reference="chassis">
    <material>Gazebo/WoodFloor</material>
    <turnGravityOff>false</turnGravityOff>
  </gazebo>


<!-- ///////////////////      Wheels      ///////////////////////   -->

<!-- Rear wheel -->
  <!-- rear wheel link -->
<xacro:macro name="rear_wheel" params= "prefix suffix X Y Z">
  <link name= "${prefix}_${suffix}_wheel">
    <visual>
      <origin rpy= "${degrees_90} 0 0" xyz= "0 0 0"/>
      <geometry><cylinder length="${wheel_width}" radius= "${wheel_radius}"/></geometry>
      <material name= "Black"/>
    </visual>
    <collision>
      <origin rpy= "${degrees_90} 0 0" xyz= "0 0 0"/>
      <geometry><cylinder length="${wheel_width}" radius= "${wheel_radius}"/></geometry>
    </collision>
    <xacro:cylinder_inertia m="${wheel_mass}" r="${wheel_radius}" h="${wheel_width}"/>
  </link>
      
  <gazebo reference ="${prefix}_${suffix}_wheel">
     <material>Gazebo/Black</material>
     <turnGravityOff>false</turnGravityOff>
  </gazebo> 

  <!-- rear wheel joint -->
<joint name="${prefix}_${suffix}_wheel_joint" type="continuous">
  <parent link= "chassis"/>
  <child link= "${prefix}_${suffix}_wheel"/>
  <origin xyz= "${(wheelbase/2)*X-(wheelbase/2)*Y} 
				        ${(chassis_width/2+wheel_width/2+0.01)*Z}  
				        ${wheel_radius+0.005}" 
		      rpy="0 0 0"/>
  <axis xyz="0 1 0"/>
  <limit effort= "10000" velocity="100"/>
  <dynamics damping="0.0" friction="0.0"/>  
</joint>
  <!-- rear wheel transmission -->
 <transmission name="${prefix}_${suffix}_wheel_trans">
    <type>transmission_interface/SimpleTransmission</type>
    <actuator name="${prefix}_${suffix}_wheel_motor">
      <hardwareInterface>EffortJointInterface</hardwareInterface>
      <mechanicalReduction>1</mechanicalReduction>    
    </actuator>
    <joint name="${prefix}_${suffix}_wheel_joint">
      <hardwareInterface>VelocityJointInterface</hardwareInterface>
    </joint>
 </transmission>
</xacro:macro>


<!-- Front wheel -->
<xacro:macro name="front_wheel" params= "prefix suffix X Y Z">
  <!-- steering link -->
 <link name= "${prefix}_steering_link">
    <visual>
      <origin rpy= "0 0 0" xyz= "0 0 0"/>
      <geometry><cylinder length="${wheel_width/5}" radius= "${wheel_radius/3}"/></geometry>
      <material name= "Black"/>
    </visual>
    <collision>
      <origin rpy= "0 0 0" xyz= "0 0 0"/>
      <geometry><cylinder length="${wheel_width/5}" radius= "${wheel_radius/3}"/></geometry>
    </collision>
    <xacro:cylinder_inertia m="${wheel_mass}" r="${wheel_radius}" h="${wheel_width}"/>

  </link>
      
  <gazebo reference ="${prefix}_steering_link">
     <material>Gazebo/Black</material>
     <turnGravityOff>false</turnGravityOff>
  </gazebo> 

  <!-- steering joint -->
  <joint name="${prefix}_steering_joint" type="revolute">
    <parent link="chassis"/>
    <child link="${prefix}_steering_link"/>
    <origin xyz= "${(wheelbase/2)*X-(wheelbase/2)*Y} 
			  	        ${(chassis_width/2+wheel_width/2+0.01)*Z}  
				          ${wheel_radius*2+0.008}" 
		        rpy="0 0 0"/> 
    <axis xyz="0 0 1"/>
    <limit lower="${-degrees_45}" upper="${degrees_45}" 
			 effort= "10000" velocity="100"/>
	  <dynamics damping="0.0" friction="0.0"/>  
  </joint>

  <!-- steering joint transmission -->
  <transmission name="${prefix}_steering_trans">
    <type>transmission_interface/SimpleTransmission</type>
    <actuator name="${prefix}_steering_act">
      <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
      <mechanicalReduction>1</mechanicalReduction>
    </actuator>
    <joint name="${prefix}_steering_joint">
      <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
    </joint>
  </transmission>

  <!-- front wheel link -->
  <link name= "${prefix}_${suffix}_wheel">
    <visual>
      <origin rpy= "${degrees_90} 0 0" xyz= "0 0 0"/>
      <geometry><cylinder length="${wheel_width}" radius= "${wheel_radius}"/></geometry>
      <material name= "Black"/>
    </visual>
    <collision>
      <origin rpy= "${degrees_90} 0 0" xyz= "0 0 0"/>
      <geometry><cylinder length="${wheel_width}" radius= "${wheel_radius}"/></geometry>
    </collision>
    <xacro:thick_walled_tube_inertial inner_rad="${wheel_radius/5}" outer_rad="${wheel_radius}" 
									height="${wheel_width}" mass="${wheel_mass}"/>
  </link>
      
  <gazebo reference ="${prefix}_${suffix}_wheel">
     <material>Gazebo/Black</material>
     <turnGravityOff>false</turnGravityOff>
  </gazebo> 

  <!-- front wheel joint -->
  <joint name="${prefix}_${suffix}_wheel_joint" type="continuous">
    <parent link= "${prefix}_steering_link"/>
    <child link= "${prefix}_${suffix}_wheel"/>
    <origin xyz= "0 0 ${-wheel_radius-0.003}" rpy="0 0 0"/>
    <axis xyz="0 1 0"/>
    <limit effort= "10000" velocity="100"/>
    <dynamics damping="0.0" friction="0.0"/>  
  </joint>

  <!-- steering joint transmission -->
  <transmission name="${prefix}_${suffix}_wheel_trans">
    <type>transmission_interface/SimpleTransmission</type>
    <actuator name="${prefix}_${suffix}_wheel_motor">
      <hardwareInterface>EffortJointInterface</hardwareInterface>
      <mechanicalReduction>1</mechanicalReduction>
    </actuator>
    <joint name="${prefix}_${suffix}_wheel_joint">
      <hardwareInterface>VelocityJointInterface</hardwareInterface>
    </joint>
  </transmission>
</xacro:macro>

<!-- Set all wheels ready. -->
<xacro:rear_wheel prefix="right" suffix="front" X="1" Y="0" Z="-1"/>
<xacro:rear_wheel prefix="right" suffix="back" X="0" Y="1" Z="-1"/>
<xacro:rear_wheel prefix="left" suffix="front" X="1" Y="0" Z="1"/>
<xacro:rear_wheel prefix="left" suffix="back" X="0" Y="1" Z="1"/>


<!--///////////////////////////////////////////////////////////////// -->

<!-- Camera -->
<joint name="chassis_to_camera" type="fixed">
  <parent link="chassis"/>
  <child link="camera_link"/>
  <origin xyz="${(chassis_length / 4)}
                0
                ${chassis_height}"
          rpy="0 0 0"/>
</joint>
<link name="camera_link">
  <collision>
    <origin xyz="${(chassis_length / 4)-0.005}
                  0
                  ${-chassis_height / 4 +0.06}" 
            rpy="0 0 0"/>
    <geometry>
      <box size="0.01 0.01 0.01"/>
    </geometry>
  </collision>

  <visual>
    <origin xyz="${(chassis_length / 4) -0.005}
                  0
                  ${-chassis_height / 4 +0.06}" 
            rpy="0 0 0"/>
    <geometry>
      <box size="0.01 0.01 0.01"/>
    </geometry>
    <material name="red"/>
  </visual>

  <inertial>
    <mass value="1e-5" />
    <origin xyz="0 0 0" rpy="0 0 0"/>
    <inertia ixx="1e-6" ixy="0" ixz="0" iyy="1e-6" iyz="0" izz="1e-6" />
  </inertial>
</link>
<gazebo reference="camera_link">
  <material>Gazebo/Red</material>
</gazebo>



<!-- //////////////////////////////////////////////////////////////// -->

<!-- ros_control plugin-->

<gazebo>
  <plugin name="gazebo_ros_control" filename= "libgazebo_ros_control.so">
    <robotNamespace>/</robotNamespace>
    <legacyModeNS>true</legacyModeNS>
  </plugin>
</gazebo>

  <!-- camera Plugin -->
  <gazebo reference="camera_link">
    <sensor type="camera" name="camera1">
      <update_rate>10.0</update_rate>
      <camera name="head">
        <horizontal_fov>1.3962634</horizontal_fov>
        <image>
          <width>640</width>
          <height>480</height>
          <format>R8G8B8</format>
        </image>
        <clip>
          <near>0.02</near>
          <far>300</far>
        </clip>
        <noise>
          <type>gaussian</type>
          <!-- Noise is sampled independently per pixel on each frame.
               That pixel's noise value is added to each of its color
               channels, which at that point lie in the range [0,1]. -->
          <mean>0.0</mean>
          <stddev>0.007</stddev>
        </noise>
      </camera>
      <plugin name="camera_controller" filename="libgazebo_ros_camera.so">
        <alwaysOn>true</alwaysOn>
        <updateRate>0.0</updateRate>
        <cameraName>smartcar/camera1</cameraName>
        <imageTopicName>image_raw</imageTopicName>
        <cameraInfoTopicName>camera_info</cameraInfoTopicName>
        <frameName>camera_link</frameName>
        <hackBaseline>0.07</hackBaseline>
        <distortionK1>0.069086</distortionK1>
        <distortionK2>-0.089009</distortionK2>
        <distortionK3>0.007247</distortionK3>
        <distortionT1>0.009025</distortionT1>
        <distortionT2>0.0</distortionT2>
      </plugin>
    </sensor>
  </gazebo>

</robot>
